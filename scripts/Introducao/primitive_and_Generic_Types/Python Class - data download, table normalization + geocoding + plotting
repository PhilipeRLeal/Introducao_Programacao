{"cells":[{"cell_type":"markdown","metadata":{"id":"wOf0kPR_WUHi"},"source":["# **Geoprocessamento**:\n","\n"," Linguagem de Programação: **Python**\n","\n","\n","\n","\n","> ## **Autor**:\n","Philipe Riskalla Leal\n","\n","\n","\n","---\n","\n","\n","\n","---\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6Fy1Qe0Xztl4"},"source":[" ## **Sumário**\n","\n","1.   geocoding\n","2.   conversão de dados\n","3.   Plotagem (visualização espacial)\n","\n","\n","---\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"YqmYeoAYWYiP"},"source":["## Instalação de Pacotes\n","  ### Via pip: Python's communication protocol and package versioning system"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34481,"status":"ok","timestamp":1694521106580,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"_TCFARIQWaaN","outputId":"cabd9ebd-da94-460c-91d3-bd321797a601"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","unzip is already the newest version (6.0-26ubuntu3.1).\n","0 upgraded, 0 newly installed, 0 to remove and 16 not upgraded.\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.42.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.23.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (23.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","libproj-dev is already the newest version (8.2.1-1).\n","proj-bin is already the newest version (8.2.1-1).\n","proj-data is already the newest version (8.2.1-1).\n","0 upgraded, 0 newly installed, 0 to remove and 16 not upgraded.\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","libgeos-dev is already the newest version (3.10.2-1).\n","0 upgraded, 0 newly installed, 0 to remove and 16 not upgraded.\n","Requirement already satisfied: cython in /usr/local/lib/python3.10/dist-packages (3.0.2)\n","Requirement already satisfied: cartopy in /usr/local/lib/python3.10/dist-packages (0.22.0)\n","Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.10/dist-packages (from cartopy) (1.23.5)\n","Requirement already satisfied: matplotlib>=3.4 in /usr/local/lib/python3.10/dist-packages (from cartopy) (3.7.1)\n","Requirement already satisfied: shapely>=1.7 in /usr/local/lib/python3.10/dist-packages (from cartopy) (2.0.1)\n","Requirement already satisfied: packaging>=20 in /usr/local/lib/python3.10/dist-packages (from cartopy) (23.1)\n","Requirement already satisfied: pyshp>=2.1 in /usr/local/lib/python3.10/dist-packages (from cartopy) (2.3.1)\n","Requirement already satisfied: pyproj>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from cartopy) (3.6.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (4.42.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (1.4.5)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (3.1.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.4->cartopy) (2.8.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from pyproj>=3.1.0->cartopy) (2023.7.22)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.4->cartopy) (1.16.0)\n","E: Unable to locate package python-cartopy\n","E: Unable to locate package python3-cartopy#\n","\u001b[33mWARNING: Skipping datascience as it is not installed.\u001b[0m\u001b[33m\n","\u001b[0mRequirement already satisfied: geopandas in /usr/local/lib/python3.10/dist-packages (0.13.2)\n","Requirement already satisfied: fiona>=1.8.19 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.9.4.post1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from geopandas) (23.1)\n","Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.5.3)\n","Requirement already satisfied: pyproj>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (3.6.0)\n","Requirement already satisfied: shapely>=1.7.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (2.0.1)\n","Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (23.1.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (2023.7.22)\n","Requirement already satisfied: click~=8.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (8.1.7)\n","Requirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.1.1)\n","Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (0.7.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2023.3.post1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (1.23.5)\n","Requirement already satisfied: geopandas in /usr/local/lib/python3.10/dist-packages (0.13.2)\n","Requirement already satisfied: fiona>=1.8.19 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.9.4.post1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from geopandas) (23.1)\n","Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.5.3)\n","Requirement already satisfied: pyproj>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (3.6.0)\n","Requirement already satisfied: shapely>=1.7.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (2.0.1)\n","Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (23.1.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (2023.7.22)\n","Requirement already satisfied: click~=8.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (8.1.7)\n","Requirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.1.1)\n","Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (0.7.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2023.3.post1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (1.23.5)\n","Requirement already satisfied: geopy in /usr/local/lib/python3.10/dist-packages (2.3.0)\n","Requirement already satisfied: geographiclib<3,>=1.52 in /usr/local/lib/python3.10/dist-packages (from geopy) (2.0)\n","Requirement already satisfied: folium in /usr/local/lib/python3.10/dist-packages (0.14.0)\n","Requirement already satisfied: branca>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from folium) (0.6.0)\n","Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from folium) (3.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from folium) (1.23.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from folium) (2.31.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=2.9->folium) (2.1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.2.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2023.7.22)\n","Collecting mapclassify\n","  Downloading mapclassify-2.6.0-py3-none-any.whl (40 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.8/40.8 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.11.2)\n","Requirement already satisfied: numpy>=1.3 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.23.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.2.2)\n","Requirement already satisfied: pandas>=1.0 in /usr/local/lib/python3.10/dist-packages (from mapclassify) (1.5.3)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from mapclassify) (3.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0->mapclassify) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0->mapclassify) (2023.3.post1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->mapclassify) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->mapclassify) (3.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=1.0->mapclassify) (1.16.0)\n","Installing collected packages: mapclassify\n","Successfully installed mapclassify-2.6.0\n"]}],"source":["# General Packages\n","!apt-get install unzip\n","\n","# Using pip for installation in our remote machine (server)\n","\n","!pip install matplotlib\n","\n","!apt-get install libproj-dev proj-data proj-bin\n","!apt-get install libgeos-dev\n","!pip install cython\n","!pip install cartopy\n","\n","!apt-get -qq install python-cartopy python3-cartopy#\n","# !pip uninstall -y shapely    # cartopy and shapely aren't friends (early 2020)\n","# !pip install shapely --no-binary shapely\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","!pip uninstall datascience -y\n","\n","!pip install geopandas\n","!pip install --upgrade geopandas\n","!pip install geopy # for geocoding\n","!pip install --upgrade folium\n","!pip install mapclassify\n"]},{"cell_type":"markdown","metadata":{"id":"XANtok8thPKg"},"source":["# Importando os pacotes necessários"]},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"elapsed":4949,"status":"ok","timestamp":1694521111524,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"kt_BUQdLhJGZ"},"outputs":[],"source":["# Ref: https://geopy.readthedocs.io/en/stable/\n","import pandas as pd\n","import numpy as np\n","import geopandas as gpd\n","import cartopy.crs as ccrs\n","import matplotlib.pyplot as plt\n","import folium\n","from shapely.geometry import Point\n","from geopy.extra.rate_limiter import RateLimiter\n","from geopy.geocoders import Photon, GoogleV3, Nominatim\n","import cartopy.feature as cfeature\n","import mapclassify\n","import matplotlib\n","\n","# check this other link for more geocoding services: https://geocoder.readthedocs.io/"]},{"cell_type":"markdown","metadata":{"id":"e9OYJvxvbj8h"},"source":["# Baixando alguns dados:\n","\n","- Exemplo: dados tabulare de endereços\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":965,"status":"ok","timestamp":1694520823003,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"MyTCV4fGbv9I","outputId":"52b0156e-c6ef-4f19-db88-1a2b06851e06"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-09-12 12:13:52--  https://www.dropbox.com/s/nt9ab4nnhpyrmxe/addresses.csv\n","Resolving www.dropbox.com (www.dropbox.com)... 162.125.3.18, 2620:100:6018:18::a27d:312\n","Connecting to www.dropbox.com (www.dropbox.com)|162.125.3.18|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: /s/raw/nt9ab4nnhpyrmxe/addresses.csv [following]\n","--2023-09-12 12:13:52--  https://www.dropbox.com/s/raw/nt9ab4nnhpyrmxe/addresses.csv\n","Reusing existing connection to www.dropbox.com:443.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com/cd/0/inline/CDmUQpdMePDCHvRsIEs6S6jV94JEmFHOtE58-XHoM3rvrPXUPB6DSFHPgRFzWla4qT1JxT89Mc7N2KqWV_IAB2j9xcygngk-yFpaEOyaiGm_SWDgd23yCrsvm_mcTzmWm6Yc6bgxINmpTg45Z4IYOtkS/file# [following]\n","--2023-09-12 12:13:53--  https://uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com/cd/0/inline/CDmUQpdMePDCHvRsIEs6S6jV94JEmFHOtE58-XHoM3rvrPXUPB6DSFHPgRFzWla4qT1JxT89Mc7N2KqWV_IAB2j9xcygngk-yFpaEOyaiGm_SWDgd23yCrsvm_mcTzmWm6Yc6bgxINmpTg45Z4IYOtkS/file\n","Resolving uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com (uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com)... 162.125.3.15, 2620:100:6018:15::a27d:30f\n","Connecting to uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com (uc4582bc8bdfe1661e3d05b531b4.dl.dropboxusercontent.com)|162.125.3.15|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2121 (2.1K) [text/plain]\n","Saving to: ‘addresses.csv’\n","\n","addresses.csv       100%[===================>]   2.07K  --.-KB/s    in 0s      \n","\n","2023-09-12 12:13:53 (816 MB/s) - ‘addresses.csv’ saved [2121/2121]\n","\n"]}],"source":["!wget https://www.dropbox.com/s/nt9ab4nnhpyrmxe/addresses.csv"]},{"cell_type":"markdown","metadata":{"id":"__ioflm0pfpa"},"source":["# Visualização da Tabela"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1694520823003,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"FQdlwxabdj1R","outputId":"731014a6-9c16-402b-d08e-b73f6e1bfde1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    Typ   Nr          Namn           Address1 Address3  \\\n","0           0  Butik  102  Fältöversten       Karlaplan 13   115 20   \n","1           1  Butik  104           NaN      Nybrogatan 47   114 39   \n","2           2  Butik  106    Garnisonen   Karlavägen 100 A   115 26   \n","3           3  Butik  110           NaN      Hötorgshallen   111 57   \n","4           4  Butik  113        Sergel  Drottninggatan 45   111 21   \n","\n","    Address4        Address5       Telefon  \n","0  STOCKHOLM  Stockholms län  08/662 22 89  \n","1  STOCKHOLM  Stockholms län  08/662 50 16  \n","2  STOCKHOLM  Stockholms län  08/662 64 85  \n","3  STOCKHOLM  Stockholms län   08/56849241  \n","4  STOCKHOLM  Stockholms län   08/21 47 44  "],"text/html":["\n","  <div id=\"df-5a788f8e-0f07-457f-a270-9439bdf072d7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Typ</th>\n","      <th>Nr</th>\n","      <th>Namn</th>\n","      <th>Address1</th>\n","      <th>Address3</th>\n","      <th>Address4</th>\n","      <th>Address5</th>\n","      <th>Telefon</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Butik</td>\n","      <td>102</td>\n","      <td>Fältöversten</td>\n","      <td>Karlaplan 13</td>\n","      <td>115 20</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 22 89</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Butik</td>\n","      <td>104</td>\n","      <td>NaN</td>\n","      <td>Nybrogatan 47</td>\n","      <td>114 39</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 50 16</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Butik</td>\n","      <td>106</td>\n","      <td>Garnisonen</td>\n","      <td>Karlavägen 100 A</td>\n","      <td>115 26</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 64 85</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Butik</td>\n","      <td>110</td>\n","      <td>NaN</td>\n","      <td>Hötorgshallen</td>\n","      <td>111 57</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/56849241</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Butik</td>\n","      <td>113</td>\n","      <td>Sergel</td>\n","      <td>Drottninggatan 45</td>\n","      <td>111 21</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/21 47 44</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a788f8e-0f07-457f-a270-9439bdf072d7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5a788f8e-0f07-457f-a270-9439bdf072d7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5a788f8e-0f07-457f-a270-9439bdf072d7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a63abd8d-e849-43f3-b62c-505b728cb8ec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a63abd8d-e849-43f3-b62c-505b728cb8ec')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a63abd8d-e849-43f3-b62c-505b728cb8ec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}],"source":["df = pd.read_csv('addresses.csv')\n","\n","df.head()"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":310},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1694520823003,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"_D4wbKxIef8Q","outputId":"17e71f4b-c23a-4374-e1f5-b4075ea8d72e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0    Typ   Nr          Namn           Address1 Address3  \\\n","0           0  Butik  102  Fältöversten       Karlaplan 13   115 20   \n","1           1  Butik  104           NaN      Nybrogatan 47   114 39   \n","2           2  Butik  106    Garnisonen   Karlavägen 100 A   115 26   \n","3           3  Butik  110           NaN      Hötorgshallen   111 57   \n","4           4  Butik  113        Sergel  Drottninggatan 45   111 21   \n","\n","    Address4        Address5       Telefon  \\\n","0  STOCKHOLM  Stockholms län  08/662 22 89   \n","1  STOCKHOLM  Stockholms län  08/662 50 16   \n","2  STOCKHOLM  Stockholms län  08/662 64 85   \n","3  STOCKHOLM  Stockholms län   08/56849241   \n","4  STOCKHOLM  Stockholms län   08/21 47 44   \n","\n","                                             ADDRESS  \n","0    Karlaplan 13, 115 20, STOCKHOLM, Stockholms län  \n","1   Nybrogatan 47, 114 39, STOCKHOLM, Stockholms län  \n","2  Karlavägen 100 A, 115 26, STOCKHOLM, Stockholm...  \n","3   Hötorgshallen, 111 57, STOCKHOLM, Stockholms län  \n","4  Drottninggatan 45, 111 21, STOCKHOLM, Stockhol...  "],"text/html":["\n","  <div id=\"df-486cd989-0da7-419f-b9d2-129453230b4f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Typ</th>\n","      <th>Nr</th>\n","      <th>Namn</th>\n","      <th>Address1</th>\n","      <th>Address3</th>\n","      <th>Address4</th>\n","      <th>Address5</th>\n","      <th>Telefon</th>\n","      <th>ADDRESS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Butik</td>\n","      <td>102</td>\n","      <td>Fältöversten</td>\n","      <td>Karlaplan 13</td>\n","      <td>115 20</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 22 89</td>\n","      <td>Karlaplan 13, 115 20, STOCKHOLM, Stockholms län</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Butik</td>\n","      <td>104</td>\n","      <td>NaN</td>\n","      <td>Nybrogatan 47</td>\n","      <td>114 39</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 50 16</td>\n","      <td>Nybrogatan 47, 114 39, STOCKHOLM, Stockholms län</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Butik</td>\n","      <td>106</td>\n","      <td>Garnisonen</td>\n","      <td>Karlavägen 100 A</td>\n","      <td>115 26</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/662 64 85</td>\n","      <td>Karlavägen 100 A, 115 26, STOCKHOLM, Stockholm...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Butik</td>\n","      <td>110</td>\n","      <td>NaN</td>\n","      <td>Hötorgshallen</td>\n","      <td>111 57</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/56849241</td>\n","      <td>Hötorgshallen, 111 57, STOCKHOLM, Stockholms län</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Butik</td>\n","      <td>113</td>\n","      <td>Sergel</td>\n","      <td>Drottninggatan 45</td>\n","      <td>111 21</td>\n","      <td>STOCKHOLM</td>\n","      <td>Stockholms län</td>\n","      <td>08/21 47 44</td>\n","      <td>Drottninggatan 45, 111 21, STOCKHOLM, Stockhol...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-486cd989-0da7-419f-b9d2-129453230b4f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-486cd989-0da7-419f-b9d2-129453230b4f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-486cd989-0da7-419f-b9d2-129453230b4f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-60844454-3056-4e77-bb9d-376a2a6d6e86\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60844454-3056-4e77-bb9d-376a2a6d6e86')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-60844454-3056-4e77-bb9d-376a2a6d6e86 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}],"source":["### Lets concatenate the different address columns into a formatted (long) string of addresses\n","\n","def concat_address(series):\n","\n","  address1, Address3, Address4, Address5 = series.values\n","\n","  cat_address = ', '.join([address1 , Address3 , Address4 , Address5])\n","\n","  return cat_address\n","\n","columns = ['Address1' , 'Address3', 'Address4', 'Address5']\n","df['ADDRESS'] = df[columns].apply(concat_address, axis=1)\n","\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"kdjb8-ICpl5y"},"source":["# Geocoding (Geocodificação)\n","\n","Description: this example describes (THOUGH NOT IMPLEMENTS) the geocoding script for our fake data. The example is based on the geocoding service of OpenStreetMap (a.k.a., Nominatim).\n","\n","**The Nominatim is no longer accepting freely geocoding.**"]},{"cell_type":"markdown","metadata":{"id":"HIUZTUcCPoUz"},"source":["### Geocoding\n","```\n","locator = Nominatim()\n","location = locator.geocode(\"Champ de Mars, Paris, France\")\n","\n","# 1 - convenient function to delay between geocoding calls\n","geocode = RateLimiter(locator.geocode, min_delay_seconds=5)\n","\n","# 2 - create location column\n","df['location'] = df['ADDRESS'].apply(geocode)\n","\n","# 3 - create longitude, laatitude and altitude from location column (returns tuple)\n","df['point'] = df['location'].apply(lambda loc: tuple(loc.point) if loc else None)\n","\n","# 4 - split point column into latitude, longitude and altitude columns\n","df[['latitude', 'longitude', 'altitude']] = pd.DataFrame(df['point'].tolist(), index=df.index)\n","\n","\n","# -----------------------------------------------------------------------------\n","\n","\n","# Now, let's convert the coordinates into geometric objects (shapely.geometry.Point instances)\n","\n","df['geometry'] = [Point(x, y) for x,y in zip(*df[['longitude', 'latitude']].values.T)]\n","\n","# Converting the Dataframe into a GeoDataFrame\n","gdf = gpd.GeoDataFrame(df, geometry='geometry')\n","\n","# Dropping empty entries\n","gdf = gdf[~gdf.geometry.is_empty]\n","gdf.head()\n","\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lE1jKGO2hdfo"},"source":["# Visualização Espacial (plotando) dados"]},{"cell_type":"markdown","metadata":{"id":"pwjPHAgMqF-q"},"source":["# visualização com o mapa de divisão política do Google Earth (Google Earth Political Division's map) como fundo (background).\n","\n","FOLIUM é nosso guia."]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":650},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1694520995317,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"cZ6BYqrTg9zg","outputId":"f9eedb20-c928-48bb-c644-ac5f99178919"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<folium.folium.Map at 0x7d8f5893a470>"],"text/html":["<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n","&lt;html&gt;\n","&lt;head&gt;\n","    \n","    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n","    \n","        &lt;script&gt;\n","            L_NO_TOUCH = false;\n","            L_DISABLE_3D = false;\n","        &lt;/script&gt;\n","    \n","    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n","    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n","    \n","            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n","                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n","            &lt;style&gt;\n","                #map_9b0c614787b64eb9124b324373340f1d {\n","                    position: relative;\n","                    width: 100.0%;\n","                    height: 100.0%;\n","                    left: 0.0%;\n","                    top: 0.0%;\n","                }\n","                .leaflet-container { font-size: 1rem; }\n","            &lt;/style&gt;\n","        \n","    &lt;script src=&quot;https://cdn.jsdelivr.net/gh/ardhi/Leaflet.MousePosition/src/L.Control.MousePosition.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/ardhi/Leaflet.MousePosition/src/L.Control.MousePosition.min.css&quot;/&gt;\n","&lt;/head&gt;\n","&lt;body&gt;\n","    \n","    \n","            &lt;div class=&quot;folium-map&quot; id=&quot;map_9b0c614787b64eb9124b324373340f1d&quot; &gt;&lt;/div&gt;\n","        \n","&lt;/body&gt;\n","&lt;script&gt;\n","    \n","    \n","            var map_9b0c614787b64eb9124b324373340f1d = L.map(\n","                &quot;map_9b0c614787b64eb9124b324373340f1d&quot;,\n","                {\n","                    center: [-23.559, -46.654],\n","                    crs: L.CRS.EPSG3857,\n","                    zoom: 10,\n","                    zoomControl: true,\n","                    preferCanvas: false,\n","                }\n","            );\n","\n","            \n","\n","        \n","    \n","            var tile_layer_2d444f17a1b711fc2c926993af76aca3 = L.tileLayer(\n","                &quot;https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png&quot;,\n","                {&quot;attribution&quot;: &quot;\\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://cartodb.com/attributions\\&quot;\\u003eCartoDB\\u003c/a\\u003e, CartoDB \\u003ca target=\\&quot;_blank\\&quot; href =\\&quot;http://cartodb.com/attributions\\&quot;\\u003eattributions\\u003c/a\\u003e&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n","            ).addTo(map_9b0c614787b64eb9124b324373340f1d);\n","        \n","    \n","            var mouse_position_627cb1f2026cf9c383d976ac3f530a20 = new L.Control.MousePosition(\n","                {&quot;emptyString&quot;: &quot;Unavailable&quot;, &quot;lngFirst&quot;: false, &quot;numDigits&quot;: 5, &quot;position&quot;: &quot;bottomright&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;separator&quot;: &quot; : &quot;}\n","            );\n","            mouse_position_627cb1f2026cf9c383d976ac3f530a20.options[&quot;latFormatter&quot;] =\n","                undefined;\n","            mouse_position_627cb1f2026cf9c383d976ac3f530a20.options[&quot;lngFormatter&quot;] =\n","                undefined;\n","            map_9b0c614787b64eb9124b324373340f1d.addControl(mouse_position_627cb1f2026cf9c383d976ac3f530a20);\n","        \n","    \n","            var mouse_position_8b4d5f91520614f1ce93c1b12ac91fb8 = new L.Control.MousePosition(\n","                {&quot;emptyString&quot;: &quot;NaN&quot;, &quot;lngFirst&quot;: true, &quot;numDigits&quot;: 20, &quot;position&quot;: &quot;topright&quot;, &quot;prefix&quot;: &quot;Coordinates:&quot;, &quot;separator&quot;: &quot; | &quot;}\n","            );\n","            mouse_position_8b4d5f91520614f1ce93c1b12ac91fb8.options[&quot;latFormatter&quot;] =\n","                function(num) {return L.Util.formatNum(num, 3) + &#x27; º &#x27;;};;\n","            mouse_position_8b4d5f91520614f1ce93c1b12ac91fb8.options[&quot;lngFormatter&quot;] =\n","                function(num) {return L.Util.formatNum(num, 3) + &#x27; º &#x27;;};;\n","            map_9b0c614787b64eb9124b324373340f1d.addControl(mouse_position_8b4d5f91520614f1ce93c1b12ac91fb8);\n","        \n","&lt;/script&gt;\n","&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"]},"metadata":{},"execution_count":20}],"source":["from folium.plugins import MousePosition\n","\n","saoPaulo=[-23.559, -46.654] # (Latitude, Longitude)\n","\n","map1 = folium.Map(\n","    location=saoPaulo,\n","    tiles='cartodbpositron',\n","    zoom_start=10,\n",")\n","\n","\n","MousePosition().add_to(map1)\n","\n","formatter = \"function(num) {return L.Util.formatNum(num, 3) + ' º ';};\"\n","\n","MousePosition(\n","    position=\"topright\",\n","    separator=\" | \",\n","    empty_string=\"NaN\",\n","    lng_first=True,\n","    num_digits=20,\n","    prefix=\"Coordinates:\",\n","    lat_formatter=formatter,\n","    lng_formatter=formatter,\n",").add_to(map1)\n","\n","\n","#gdf.apply(lambda row:folium.CircleMarker(location=[row[\"latitude\"], row[\"longitude\"]]).add_to(map1), axis=1)\n","map1"]},{"cell_type":"markdown","metadata":{"id":"jdwLQHiPXG-w"},"source":["## Operações Espaciais\n","\n","    Agregação de Pontos por área"]},{"cell_type":"markdown","metadata":{"id":"cAmzPALuqqsy"},"source":["# Baixando dados do IBGE\n","\n","## Acessar este link para download da Rede Viária brasileira  [link](https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?edicao=30138&t=acesso-ao-produto)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2306,"status":"ok","timestamp":1694520825301,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"iizWaJIfsUfy","outputId":"08f6ca69-d336-420a-92bd-c1a6640916b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-09-12 12:13:53--  https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2020/UFs/PA/PA_Municipios_2020.zip\n","Resolving geoftp.ibge.gov.br (geoftp.ibge.gov.br)... 191.233.136.86\n","Connecting to geoftp.ibge.gov.br (geoftp.ibge.gov.br)|191.233.136.86|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2393908 (2.3M) [application/zip]\n","Saving to: ‘PA_Municipios_2020.zip’\n","\n","PA_Municipios_2020. 100%[===================>]   2.28M  2.28MB/s    in 1.0s    \n","\n","2023-09-12 12:13:55 (2.28 MB/s) - ‘PA_Municipios_2020.zip’ saved [2393908/2393908]\n","\n","Archive:  PA_Municipios_2020.zip\n","  inflating: PA_Municipios_2020/PA_Municipios_2020.cpg  \n","  inflating: PA_Municipios_2020/PA_Municipios_2020.dbf  \n","  inflating: PA_Municipios_2020/PA_Municipios_2020.prj  \n","  inflating: PA_Municipios_2020/PA_Municipios_2020.shp  \n","  inflating: PA_Municipios_2020/PA_Municipios_2020.shx  \n"]}],"source":["# Downloading vetores do Pará\n","\n","!wget 'https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2020/UFs/PA/PA_Municipios_2020.zip'\n","\n","!unzip  \"PA_Municipios_2020.zip\" -d \"PA_Municipios_2020\"\n","\n","Municipalities = gpd.read_file('PA_Municipios_2020/PA_Municipios_2020.shp')"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1694520825302,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"DDp3ZmTzT0eu","outputId":"872d4b01-6f89-4393-9d5a-ec8bdeae301e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Geographic 2D CRS: EPSG:4674>\n","Name: SIRGAS 2000\n","Axis Info [ellipsoidal]:\n","- Lat[north]: Geodetic latitude (degree)\n","- Lon[east]: Geodetic longitude (degree)\n","Area of Use:\n","- name: Latin America - Central America and South America - onshore and offshore. Brazil - onshore and offshore.\n","- bounds: (-122.19, -59.87, -25.28, 32.72)\n","Datum: Sistema de Referencia Geocentrico para las AmericaS 2000\n","- Ellipsoid: GRS 1980\n","- Prime Meridian: Greenwich"]},"metadata":{},"execution_count":9}],"source":["# Checking projection\n","\n","Municipalities.crs\n"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1694520825302,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"Mr_vTFW2vN8E","outputId":"99751a8c-5373-4929-a2ac-b756f87ca837"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Ocurrence                    geometry\n","1            1   POINT (-49.65159 0.15383)\n","34           1   POINT (-50.01677 0.14392)\n","192          1  POINT (-49.46236 -0.58573)\n","291          1  POINT (-49.00257 -0.20750)\n","316          1  POINT (-49.54554 -0.08864)"],"text/html":["\n","  <div id=\"df-0be1600c-a9b8-42ea-95e0-319cb7b64986\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Ocurrence</th>\n","      <th>geometry</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>POINT (-49.65159 0.15383)</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>1</td>\n","      <td>POINT (-50.01677 0.14392)</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>1</td>\n","      <td>POINT (-49.46236 -0.58573)</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>1</td>\n","      <td>POINT (-49.00257 -0.20750)</td>\n","    </tr>\n","    <tr>\n","      <th>316</th>\n","      <td>1</td>\n","      <td>POINT (-49.54554 -0.08864)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0be1600c-a9b8-42ea-95e0-319cb7b64986')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0be1600c-a9b8-42ea-95e0-319cb7b64986 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0be1600c-a9b8-42ea-95e0-319cb7b64986');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1566809d-71fd-42e2-b610-faf3f554d7ba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1566809d-71fd-42e2-b610-faf3f554d7ba')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1566809d-71fd-42e2-b610-faf3f554d7ba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}],"source":["\n","def generate_random_points(gdf, size = 400):\n","\n","  np.random.seed(1)\n","\n","  xmin, ymin, xmax, ymax = gdf.total_bounds\n","  dx = xmax - xmin\n","  dy = ymax - ymin\n","\n","  xx = xmin + dx*np.random.random(size=size)\n","\n","  yy = ymin + dy*np.random.random(size=size)\n","\n","  New_Random_Points = gpd.GeoSeries([Point(x, y) for x,y in zip(xx, yy)], crs='epsg:4326')\n","  New_Random_Points = New_Random_Points.to_frame('geometry')\n","  New_Random_Points = New_Random_Points.sjoin(gdf, how='inner')\n","  New_Random_Points = New_Random_Points.assign(Ocurrence = lambda x: 1)\n","  return New_Random_Points[['Ocurrence', 'geometry']]\n","\n","Random_Points = generate_random_points(Municipalities)\n","\n","Random_Points.head()"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":809,"status":"ok","timestamp":1694520826108,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"A9h2iCZtsBxM","outputId":"d0f60ec4-2e01-422c-e08b-2917f14c337e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["projection = ccrs.PlateCarree()\n","transform = ccrs.Geodetic()\n","fig, ax = plt.subplots(subplot_kw={'projection':projection})\n","\n","Municipalities.plot(ax=ax, transform=projection)\n","\n","Random_Points = generate_random_points(Municipalities)\n","\n","Random_Points.plot(ax=ax,\n","                   zorder=2, color='red',\n","                   linewidth=2, marker='o',\n","                   transform=transform)\n","\n","Gridliner = ax.gridlines(draw_labels=True, lw=1.2, edgecolor=\"darkblue\", zorder=12)\n","\n","fig.show()"]},{"cell_type":"markdown","metadata":{"id":"9xqKlhrgauag"},"source":["# Exemplo de Agregação\n","\n","Descrição: Neste exemplo, utilizaremos a função de spatial (sjoin) do Geopandas para a agregação espacial"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":1940,"status":"ok","timestamp":1694520828044,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"yywWqZCrYMEA","outputId":"4d9c44dc-73c7-4c47-fc04-47c21203b9f3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    CD_MUN                                           geometry  AREA_KM2  \\\n","0  1500107  POLYGON ((-48.83139 -1.56352, -48.82910 -1.571...  1610.654   \n","1  1500131  POLYGON ((-48.56310 -4.82660, -48.55996 -4.828...   614.131   \n","2  1500206  POLYGON ((-48.30696 -1.47116, -48.30343 -1.470...  8688.768   \n","3  1500305  POLYGON ((-50.50553 0.18421, -50.50220 0.18376...  8338.438   \n","4  1500347  POLYGON ((-50.81162 -6.27576, -50.81070 -6.276...  7113.955   \n","\n","   index_right  Ocurrence  \n","0          0.0        0.0  \n","1          0.0        0.0  \n","2        515.0        2.0  \n","3          0.0        0.0  \n","4        203.0        1.0  "],"text/html":["\n","  <div id=\"df-f477d5d8-40fe-4d19-bc7a-be87edc4ea67\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CD_MUN</th>\n","      <th>geometry</th>\n","      <th>AREA_KM2</th>\n","      <th>index_right</th>\n","      <th>Ocurrence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1500107</td>\n","      <td>POLYGON ((-48.83139 -1.56352, -48.82910 -1.571...</td>\n","      <td>1610.654</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1500131</td>\n","      <td>POLYGON ((-48.56310 -4.82660, -48.55996 -4.828...</td>\n","      <td>614.131</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1500206</td>\n","      <td>POLYGON ((-48.30696 -1.47116, -48.30343 -1.470...</td>\n","      <td>8688.768</td>\n","      <td>515.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1500305</td>\n","      <td>POLYGON ((-50.50553 0.18421, -50.50220 0.18376...</td>\n","      <td>8338.438</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1500347</td>\n","      <td>POLYGON ((-50.81162 -6.27576, -50.81070 -6.276...</td>\n","      <td>7113.955</td>\n","      <td>203.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f477d5d8-40fe-4d19-bc7a-be87edc4ea67')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f477d5d8-40fe-4d19-bc7a-be87edc4ea67 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f477d5d8-40fe-4d19-bc7a-be87edc4ea67');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-865be415-1adf-4164-8733-cb72c5fdadd6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-865be415-1adf-4164-8733-cb72c5fdadd6')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-865be415-1adf-4164-8733-cb72c5fdadd6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":12}],"source":["Municipalities_Occurence = (Municipalities.sjoin(Random_Points, how=\"left\").fillna(0)\n","                       .dissolve(by='CD_MUN', aggfunc='sum')\n","                       ).fillna(0).reset_index()\n","\n","Municipalities_Occurence.head()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":1284,"status":"ok","timestamp":1694520829325,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"nfOwk4GWxtau","outputId":"28a727b8-2c2c-4889-8a5b-69e347ae4b75"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["projection = ccrs.PlateCarree()\n","transform = ccrs.Geodetic()\n","fig, ax = plt.subplots(subplot_kw={'projection':projection})\n","\n","Municipalities_Occurence.plot(column='Ocurrence',\n","                          ax=ax, transform=projection)\n","\n","Gridliner = ax.gridlines(draw_labels=True, lw=1.2, edgecolor=\"darkblue\", zorder=12)\n","\n","fig.show()"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1694520829325,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"Pbkwa9MkT5g6","outputId":"50b96187-3fc0-4138-c2d1-5fbfffe9d545"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    CD_MUN                                           geometry  AREA_KM2  \\\n","0  1500107  POLYGON ((-48.83139 -1.56352, -48.82910 -1.571...  1610.654   \n","1  1500131  POLYGON ((-48.56310 -4.82660, -48.55996 -4.828...   614.131   \n","2  1500206  POLYGON ((-48.30696 -1.47116, -48.30343 -1.470...  8688.768   \n","3  1500305  POLYGON ((-50.50553 0.18421, -50.50220 0.18376...  8338.438   \n","4  1500347  POLYGON ((-50.81162 -6.27576, -50.81070 -6.276...  7113.955   \n","\n","   index_right  Ocurrence  \n","0          0.0        0.0  \n","1          0.0        0.0  \n","2        515.0        2.0  \n","3          0.0        0.0  \n","4        203.0        1.0  "],"text/html":["\n","  <div id=\"df-eebf6996-ec15-445d-a443-89b3e6bcb889\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CD_MUN</th>\n","      <th>geometry</th>\n","      <th>AREA_KM2</th>\n","      <th>index_right</th>\n","      <th>Ocurrence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1500107</td>\n","      <td>POLYGON ((-48.83139 -1.56352, -48.82910 -1.571...</td>\n","      <td>1610.654</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1500131</td>\n","      <td>POLYGON ((-48.56310 -4.82660, -48.55996 -4.828...</td>\n","      <td>614.131</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1500206</td>\n","      <td>POLYGON ((-48.30696 -1.47116, -48.30343 -1.470...</td>\n","      <td>8688.768</td>\n","      <td>515.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1500305</td>\n","      <td>POLYGON ((-50.50553 0.18421, -50.50220 0.18376...</td>\n","      <td>8338.438</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1500347</td>\n","      <td>POLYGON ((-50.81162 -6.27576, -50.81070 -6.276...</td>\n","      <td>7113.955</td>\n","      <td>203.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eebf6996-ec15-445d-a443-89b3e6bcb889')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eebf6996-ec15-445d-a443-89b3e6bcb889 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eebf6996-ec15-445d-a443-89b3e6bcb889');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ac2cf192-aa85-4ca4-920f-12fefe403da7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac2cf192-aa85-4ca4-920f-12fefe403da7')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ac2cf192-aa85-4ca4-920f-12fefe403da7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":14}],"source":["# Converting to EPSG4326 for FOLIUM VIZ\n","\n","Municipalities_Occurence = Municipalities_Occurence.to_crs(epsg=4326)\n","\n","Municipalities_Occurence.head()"]},{"cell_type":"markdown","metadata":{"id":"geEvVA0qSjHa"},"source":["# using Folium for visualization"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":650,"output_embedded_package_id":"1gy5U6uVHr6cFJLyeVqQnWtzgPq0sV6UT"},"executionInfo":{"elapsed":2881,"status":"ok","timestamp":1694521115159,"user":{"displayName":"Philipe Riskalla Leal","userId":"17228323800179659862"},"user_tz":180},"id":"HHB_JXr_SXOh","outputId":"5a922dd6-a721-46bf-b218-72b92688bc90"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["xmin, ymin, xmax, ymax = Municipalities_Occurence.total_bounds\n","\n","centroidx = np.mean([xmin, xmax])\n","centroidy = np.mean([ymin, ymax])\n","\n","map1 = folium.Map(\n","    location=[centroidy, centroidx],\n","    tiles='cartodbpositron',\n","    zoom_start=6,\n",")\n","\n","cmap = matplotlib.cm.get_cmap('viridis')\n","\n","vmin = Municipalities_Occurence[\"Ocurrence\"].min()\n","vmax = Municipalities_Occurence[\"Ocurrence\"].max()\n","\n","\n","norm = matplotlib.colors.SymLogNorm(vmin=vmin, vmax=vmax, linthresh=0.1)\n","\n","def fetchHexFromValue(value):\n","  NormedValue = norm(value)\n","  RGBAValue = cmap(NormedValue)\n","  HEXValue = matplotlib.colors.to_hex(RGBAValue)\n","  return HEXValue\n","\n","\n","for idx, r in Municipalities_Occurence.set_index(\"CD_MUN\").iterrows():\n","\n","    lat = r[\"geometry\"].centroid.y\n","    lon = r[\"geometry\"].centroid.x\n","    msg = 'CD_MUN:{0} <br> Ocurrence: {1}'\n","    f = folium.Marker(location=[lat, lon],\n","                      popup=msg.format(idx,r['Ocurrence'])\n","                 )\n","    f.add_to(map1)\n","\n","\n","map1\n","\n","Municipalities_Occurence.explore(\"Ocurrence\", cmap=\"viridis\", m=map1)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"kHwjZWjoVDSs"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMPbYTHrpBmle7aYdlEqZfc"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}